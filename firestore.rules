
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /categories/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /papers/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /paper_questions/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /questions/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /question_categories/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /settings/global_app_settings {
        allow read: if true;
        allow write: if request.auth != null;
    }

    match /pages/{document=**} {
        allow read: if true;
        allow write: if request.auth != null;
    }

    match /plans/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /contact_submissions/{document=**} {
      allow read, write: if request.auth != null;
      allow create: if true;
    }
    
    match /users/{userId} {
      allow read, update: if request.auth != null && (request.auth.uid == userId);
      // Admin functionality needs broader rules, potentially via custom claims,
      // which are not managed here. For now, admin client-side write access to other
      // user docs is implicitly handled by Firestore's default-deny, but a real
      // implementation would use Cloud Functions with the Admin SDK to bypass these rules.
      // We will allow any authenticated user to read other user profiles for the admin panel to work.
      allow read: if request.auth != null;
    }
  }
}
